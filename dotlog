Mon 24 Aug 2015 01:16:23 BST
2.11.3
haha
haha
Mon 24 Aug 2015 01:16:28 BST
2.11.3
haha
haha
Mon 24 Aug 2015 01:17:17 BST
2.11.3
haha
haha
Mon 24 Aug 2015 01:17:39 BST
2.11.3
haha
haha
Mon 24 Aug 2015 01:18:33 BST
2.11.3
haha
haha
Mon 24 Aug 2015 01:18:57 BST
2.11.3
config/.gitconfig
config/.zshrc
Mon 24 Aug 2015 01:20:17 BST
2.11.3
config/.gitconfig
config/.zshrc
Mon 24 Aug 2015 01:20:32 BST
2.11.3
config/.gitconfig
config/.zshrc
Mon 24 Aug 2015 01:20:50 BST
2.11.3
# My ~/.gitconfig file
# (with personal information removed)
# Take what you will!
[core]
	quotepath = false
	editor = subl -w
	excludesfile = /Users/walter/.gitignore_global

[color]
	diff = auto
	status = auto
	branch = auto
	ui = true

[help]
	autocorrect = 1

[mergetool]
	keepBackup = true

[rerere]
	enabled = true

[push]
	default = simple

[alias]
	cl = clone
	co = commit
	com = commit
	# add and commit with message
	coam = commit -am
	# amend a previous commit
	amend = commit --amend
	pr = pull --rebase
	ch = checkout
	st = status
	br = branch
	# add in patch-mode (interactive)
	ap = add -p
	# undo the last commit
	undo = reset --soft HEAD~1
	# new branch
	nbr = checkout -b
	# try out a merge
	drymerge = merge --no-commit --no-ff
	# wipe away chnges to tracked files
	clear = !git stash && git stash drop

	# some tasty logging graphs
	# I tend to use lg and lg4
	lg1 = log --graph --all --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(bold white)— %an%C(reset)%C(bold yellow)%d%C(reset)' --abbrev-commit --date=relative
	lg2 = log --graph --all --format=format:'%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(reset) %C(bold green)(%ar)%C(reset)%C(bold yellow)%d%C(reset)%n''          %C(white)%s%C(reset) %C(bold white)— %an%C(reset)' --abbrev-commit
	lg3 = !git log --graph --oneline --all --decorate `git reflog | cut -c1-7`
	lg4 = !git log --graph --oneline --decorate
	lg = !git lg1

	# diff of what happend in the last day
	todiff = !git diff $(git rev-list -n1 --before=\"1 day ago\" ${1:-master})
	# summary of changes today
	today = !git diff $(git rev-list -n1 --before=\"1 day ago\" ${1:-master}) --shortstat
	# try out a merge
	drymerge = merge --no-commit --no-ff

	# Stage me. Requires you have my easy-staging script.
	# https://gist.github.com/phuu/5704768
	stageme = !gitstage
[difftool "sourcetree"]
	cmd = opendiff \"$LOCAL\" \"$REMOTE\"
	path = 
[mergetool "sourcetree"]
	cmd = /Applications/SourceTree.app/Contents/Resources/opendiff-w.sh \"$LOCAL\" \"$REMOTE\" -ancestor \"$BASE\" -merge \"$MERGED\"
	trustExitCode = true
[user]
	name = Walter Carvalho
	email = waltervascarvalho@gmail.com
# Path to your oh-my-zsh installation.
export ZSH=/Users/walter/.oh-my-zsh

# Set name of the theme to load.
# Look in ~/.oh-my-zsh/themes/
# Optionally, if you set this to "random", it'll load a random theme each
# time that oh-my-zsh is loaded.
ZSH_THEME="pure"

# Uncomment the following line to use case-sensitive completion.
# CASE_SENSITIVE="true"

# Uncomment the following line to use hyphen-insensitive completion. Case
# sensitive completion must be off. _ and - will be interchangeable.
# HYPHEN_INSENSITIVE="true"

# Uncomment the following line to disable bi-weekly auto-update checks.
# DISABLE_AUTO_UPDATE="true"

# Uncomment the following line to change how often to auto-update (in days).
# export UPDATE_ZSH_DAYS=13

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"

# Uncomment the following line to disable auto-setting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
# COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# The optional three formats: "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
# HIST_STAMPS="mm/dd/yyyy"

# Would you like to use another custom folder than $ZSH/custom?
# ZSH_CUSTOM=/path/to/new-custom-folder

# Which plugins would you like to load? (plugins can be found in ~/.oh-my-zsh/plugins/*)
# Custom plugins may be added to ~/.oh-my-zsh/custom/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
plugins=(git)

# User configuration

export PATH="bin:.bundle/binstubs:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin"

source $ZSH/oh-my-zsh.sh

#init rbenv
eval "$(rbenv init - zsh)"

# init nvm
[[ -s $HOME/.nvm/nvm.sh ]] && . $HOME/.nvm/nvm.sh

# init smartcd
[ -r "$HOME/.smartcd_config" ] && ( [ -n $BASH_VERSION ] || [ -n $ZSH_VERSION ] ) && source ~/.smartcd_config

export PATH="node_modules/.bin:$PATH" # make sure local node_modules are used, rather than global

# aliases

alias gc='cd ~/gc'
alias serve='python -m SimpleHTTPServer'
alias iossim='sudo open /Applications/Xcode.app/Contents/Developer/Applications/iOS\ Simulator.app'

# You may need to manually set your language environment
# export LANG=en_US.UTF-8

# Preferred editor for local and remote sessions
# if [[ -n $SSH_CONNECTION ]]; then
#   export EDITOR='vim'
# else
#   export EDITOR='mvim'
# fi

# Compilation flags
# export ARCHFLAGS="-arch x86_64"

# ssh
# export SSH_KEY_PATH="~/.ssh/dsa_id"

# Set personal aliases, overriding those provided by oh-my-zsh libs,
# plugins, and themes. Aliases can be placed here, though oh-my-zsh
# users are encouraged to define aliases within the ZSH_CUSTOM folder.
# For a full list of active aliases, run `alias`.
#
# Example aliases
alias zshconfig="subl ~/.zshrc"
alias ohmyzsh="subl ~/.oh-my-zsh"Mon 24 Aug 2015 01:20:56 BST
2.11.3
config/.gitconfig
config/.zshrc
Mon 24 Aug 2015 01:21:03 BST
2.11.3
config/.gitconfig
config/.zshrc
Mon 24 Aug 2015 01:21:32 BST
One sec, just cleaning up
HEAD is now at a4ad985 uninstall: simplify logic
config/.gitconfig
config/.zshrc
Mon 24 Aug 2015 01:22:21 BST
One sec, just cleaning up
HEAD is now at a4ad985 uninstall: simplify logic
config/.gitconfig
config/.zshrc
Mon 24 Aug 2015 01:22:42 BST
One sec, just cleaning up
HEAD is now at a4ad985 uninstall: simplify logic
config/.gitconfig
config/.zshrc
